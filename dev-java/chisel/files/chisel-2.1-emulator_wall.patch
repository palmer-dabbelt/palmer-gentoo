From 4e421a9a3e9b84c554899a553c37b65f4871ae68 Mon Sep 17 00:00:00 2001
From: Palmer Dabbelt <palmer.dabbelt@eecs.berkeley.edu>
Date: Fri, 20 Dec 2013 19:04:38 -0800
Subject: [PATCH] Allow emulator.h to build under "-Wall -Wextra"

I like to build by cone with CXXFLAGS="-Wall -Wextra -Werror".  It
appears that the code that's generated by Chisel builds fine this way,
but emulator.h generates a whole bunch of warnings on my machine.

This takes advantage of GCC's "#pragme GCC diagnostic" to hide the
warninsg that GCC generates for me.  This depends on having a new-ish
GCC because it uses the push/pop pragmas in order to allow me to build
the remainder of my code with warnings still enabled but mask the
warnings inside emulator.h.
---
 csrc/emulator.h | 23 ++++++++++++++++++++++-
 1 file changed, 22 insertions(+), 1 deletion(-)

diff --git a/csrc/emulator.h b/csrc/emulator.h
index 4c551f3..b4a228f 100644
--- a/csrc/emulator.h
+++ b/csrc/emulator.h
@@ -1,6 +1,22 @@
 #ifndef __IS_EMULATOR__
 #define __IS_EMULATOR__
 
+/* This file generates a whole bunch of warnings, so I've just gone
+ * ahead and masked them out manually. */
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wunused-parameter"
+#pragma GCC diagnostic ignored "-Wsign-compare"
+#pragma GCC diagnostic ignored "-Wparentheses"
+#pragma GCC diagnostic ignored "-Wreturn-type"
+#pragma GCC diagnostic ignored "-Wchar-subscripts"
+#pragma GCC diagnostic ignored "-Wtype-limits"
+
+/* These two don't actually have any effect (I guess it's probably a
+ * GCC bug, but they do claim that only some warnings are supported).
+ * I instead had to manually __attribute__ each offender myself. */
+#pragma GCC diagnostic ignored "-Wunused-function"
+#pragma GCC diagnostic ignored "-Wunused-variable"
+
 #include <assert.h>
 #include <inttypes.h>
 #include <stdio.h>
@@ -1490,7 +1506,8 @@ static int dat_as_str(char* s, val_t x) {
 }
 
 #if __cplusplus >= 201103L
-static void dat_format(char* s, const char* fmt)
+static void dat_format(char* s, const char* fmt) __attribute__((unused));
+void dat_format(char* s, const char* fmt)
 {
   for (char c; (c = *fmt); fmt++) {
     if (c == '%' && *++fmt != '%')
@@ -2133,4 +2150,8 @@ class mod_t {
     throw std::runtime_error("Assertion failed: " msg); \
 }
 
+/* Restore the diagnostic state so any code that wants to be built
+ * with -Wall/-Wextra will be. */
+#pragma GCC diagnostic pop
+
 #endif
-- 
1.8.3.2

